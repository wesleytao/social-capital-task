family="gaussian")
this.lambda<-fit.reg.cv$lambda.min # we choose lambda with the minimun mse
yhat       <-predict(fit.reg.cv, s=this.lambda, newx=X_train) # get pred over the train set
mse        <- mean((y_train - yhat)^2) #compute mse
result[i,2]<-mse #
}
# plot mse over alpha
ggplot(data = result,aes(x=alpha,y=mse))+
geom_line()+
labs(title="Select Alpha based on cross-validation error")
set.seed(1)
fit.ela.cv <- cv.glmnet(X_train, y_train, type.measure="mse", alpha=0.9,
family="gaussian",nfolds = 5)
plot(fit.ela.cv)
yhat <- predict(fit.ela.cv, s=fit.ela.cv$lambda.1se, newx=X_test)
test_mse <- mean((y_test - yhat)^2)
plot(fit.ela.cv$glmnet.fit,"norm",label = T)
plot(fit.ela.cv$glmnet.fit,"lambda",label = T)
setwd("../figs") # set image path
png(filename = paste("coe path",".png",sep = ""))
plot(fit.ela.cv$glmnet.fit,"lambda",label = T)
dev.off()
split("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC64")
strsplit("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC64")
strsplit("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC64".split=" ")
strsplit("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC64".split=" ")
strsplit("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC64",split=" ")
strsplit("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC64",split="\n")
var<-strsplit("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC64",split="\n")[[1]]
var
Census_data <-read.csv("../data/Census data with variables 2016.csv",header = T,sep=",",as.is = T)
rate_2014   <-read.table("../output/rate_2014.tsv",header=T) # first row seems to be the description of the variable
var_des     <-Census_data[1,] # store description
Census_data <-Census_data[-1,-1] # rest of the data,drop the first column and first row
rate_2014$id          <- as.integer(rate_2014$id) # we need to convert to integer for combining data
Census_data$GEO.id2   <- as.integer(Census_data$GEO.id2)
names(rate_2014)      <- c("GEO.id2","SK14") # rename the label
states<-regmatches(Census_data$GEO.display.label,regexpr(pattern = ", [A-Z]+[a-z]+",text=Census_data$GEO.display.label))
states<-as.factor(substr(states,3,nchar(states)))
Census_data$GEO.display.label<-states
county<-gsub(",.*$", "", Census_data$GEO.display.label)
Census_data$county<-county
newdata<-rate_2014 %>%
left_join(Census_data,by="GEO.id2") #combine two table
Census_data <-read.csv("../data/Census data with variables 2016.csv",header = T,sep=",",as.is = T)
rate_2014   <-read.table("../output/rate_2014.tsv",header=T) # first row seems to be the description of the variable
var_des     <-Census_data[1,] # store description
Census_data <-Census_data[-1,-1] # rest of the data,drop the first column and first row
rate_2014$id          <- as.integer(rate_2014$id) # we need to convert to integer for combining data
Census_data$GEO.id2   <- as.integer(Census_data$GEO.id2)
names(rate_2014)      <- c("GEO.id2","SK14") # rename the label
states<-regmatches(Census_data$GEO.display.label,regexpr(pattern = ", [A-Z]+[a-z]+",text=Census_data$GEO.display.label))
states<-as.factor(substr(states,3,nchar(states)))
Census_data$GEO.display.label<-states
county<-gsub(",.*$", "", Census_data$GEO.display.label)
Census_data$county<-county
newdata<-rate_2014 %>%
left_join(Census_data,by="GEO.id2") #combine two table
rate_2014   <-read.table("../output/rate_2014.tsv",header=T) # first row seems to be the description of the variable
Census_data <-read.csv("../data/Census data with variables 2016.csv",header = T,sep=",",as.is = T)
getwd()
# head(newdata)
getwd()
setwd("C:/Users/Wesle/Documents/GitHub/social-capital-task/lib")
Census_data <-read.csv("../data/Census data with variables 2016.csv",header = T,sep=",",as.is = T)
rate_2014   <-read.table("../output/rate_2014.tsv",header=T) # first row seems to be the description of the variable
var_des     <-Census_data[1,] # store description
Census_data <-Census_data[-1,-1] # rest of the data,drop the first column and first row
rate_2014$id          <- as.integer(rate_2014$id) # we need to convert to integer for combining data
Census_data$GEO.id2   <- as.integer(Census_data$GEO.id2)
names(rate_2014)      <- c("GEO.id2","SK14") # rename the label
states<-regmatches(Census_data$GEO.display.label,regexpr(pattern = ", [A-Z]+[a-z]+",text=Census_data$GEO.display.label))
states<-as.factor(substr(states,3,nchar(states)))
Census_data$GEO.display.label<-states
county<-gsub(",.*$", "", Census_data$GEO.display.label)
Census_data$county<-county
newdata<-rate_2014 %>%
left_join(Census_data,by="GEO.id2") #combine two table
head(newdata)
head(newdata,3)
nrow(newdata)
rownames(newdata)
colnames(newdata)
var_X
var_X<-strsplit("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC64",split="\n")[[1]]
var_X
var_y<-"SK14"
filter_data<-newdata[,c(var_y,"county",var_X)]
c(var_y,"county",var_X)
filter_data<-newdata[,c("county",var_X)]
filter_data<-newdata[,var_X]
c(var_y,"county",var_X)
filter_data<-newdata[,"HC03_VC07"]
filter_data<-newdata[,c("HC03_VC07",var_X)]
filter_data<-newdata[,var_y]
filter_data<-newdata[,c(var_y,var_X)]
var_X<-strsplit("HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC164",split="\n")[[1]]
filter_data<-newdata[,c(var_y,"county",var_X)]
head(filter_data)
nrow(pop)
nrow(filter_data)
var_X<-strsplit("HC01_VC03
HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC164",split="\n")[[1]]
filter_data<-newdata[,c(var_y,"county",var_X)]
head(filter_data)
write.csv(filter_data,"Interesting_vars_based_on_lasso.csv")
# need to classify each class
class<-ifelse(filter_data$SK14>0,1,-1)
summary(class)
filter_data$class<-class
summary(filter_data)
head(filter_data)
"HC03_VC131
HC03_VC132
HC03_VC134",split="\n")[[1]]
strsplit("HC03_VC131 HC03_VC132 HC03_VC134",split=" ")[[1]]
insurance_var<-strsplit("HC03_VC131 HC03_VC132 HC03_VC134",split=" ")[[1]]
filter_data[,insurance_var]/filter_data$HC01_VC03
as.numeric(filter_data[,var_X])
apply(filter_data[,var_X],2,as.numeric)
head(cbind(filter_data[,c(var_y,"county")],X))
X<-apply(filter_data[,var_X],2,as.numeric)
head(cbind(filter_data[,c(var_y,"county")],X))
filter_data<-cbind(filter_data[,c(var_y,"county")],X)
filter_data[,insurance_var]/filter_data$HC01_VC03
(filter_data[,insurance_var]/filter_data$HC01_VC03)*filter_data$HC01_VC03==filter_data[,insurance_var]
modified_insurance<-(filter_data[,insurance_var]/filter_data$HC01_VC03)
filter_data[,c("HC03_VC131_m","HC03_VC132_m","HC03_VC134")]<-modified_insurance
colnames(newdata)
var_y<-"SK14"
var_X<-strsplit("HC01_VC03
HC03_VC07
HC03_VC23
HC03_VC50
HC03_VC69
HC03_VC101
HC03_VC131
HC03_VC132
HC03_VC134
HC03_VC164",split="\n")[[1]]
filter_data<-newdata[,c(var_y,"county",var_X)]
X<-apply(filter_data[,var_X],2,as.numeric)
filter_data<-cbind(filter_data[,c(var_y,"county")],X)
# need to classify each class
class<-ifelse(filter_data$SK14>0,1,-1)
summary(class)
filter_data$class<-class
insurance_var<-strsplit("HC03_VC131 HC03_VC132 HC03_VC134",split=" ")[[1]]
modified_insurance<-(filter_data[,insurance_var]/filter_data$HC01_VC03)
filter_data[,c("HC03_VC131_m","HC03_VC132_m","HC03_VC134_m")]<-modified_insurance
head(filter_data)
write.csv(filter_data,"Interesting_vars_based_on_lasso.csv")
str(filter_data)
filter_data$county<-as.factor(filter_data$county)
colnames(filter_data)!%in% insurance_var
colnames(filter_data)%in% insurance_var
!colnames(filter_data)%in% insurance_var
ada<-ada(class~.,data=filter_data[,!colnames(filter_data)%in% insurance_var],iter=20,nu=1,type="discrete")
thisada<-ada(class~.,data=filter_data[,!colnames(filter_data)%in% insurance_var],iter=20,nu=1,type="discrete")
plot(thisada)
plot(thisada,T,T)
varplot(thisada)
thisada<-ada(class~.,data=filter_data[,!colnames(filter_data)%in% c(insurance_var,"SK14")],iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=filter_data[,!colnames(filter_data)%in% c(insurance_var,"SK14","HC01_VC_03")],iter=20,nu=1,type="discrete")
varplot(thisada)
data_forada<-filter_data[,!colnames(filter_data)%in% c(insurance_var,"SK14","HC01_VC_03")]
rownames(data_forada)
names(data_forada)
names(data_forada)
thisada<-ada(class~.,data=,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
plot(thisada,T,T)
varplot(thisada)
plot(thisada,T,T)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
data_forada<-filter_data[,!colnames(filter_data)%in% c(insurance_var,"SK14","HC01_VC03")]
names(data_forada)
names(data_forada)<-c("states","")
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
data_forada<-filter_data[,!colnames(filter_data)%in% c(insurance_var,"SK14","HC01_VC03")]
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
varplot(thisada)
plot(thisada,T,T)
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
data_forada<-filter_data[,!colnames(filter_data)%in% c(insurance_var,"SK14","HC01_VC03")]
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
names(data_forada)
names(data_forada)
names(data_forada)<-c("states","Unemployment_Rate","Both_Parents_working","Hunting_fishing_industry","Self-employed","FoodStamp",
"Poverty_level","class","Public_insurance_coverage_modified","private_insurance_coveraged_modified","no_health_insurance")
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
thisada<-ada(class~.,data=data_forada,iter=20,nu=1,type="discrete")
varplot(thisada)
# load the data
Cencus<-read.csv("../data/Census data with variables 2016.csv")
rownames(Cencus)
colnames(Cencus)
Census_data <-read.csv("../data/Census data with variables 2016.csv",header = T,sep=",",as.is = T)
rate_2014   <-read.table("../output/rate_2014.tsv",header=T) # first row seems to be the description of the variable
var_des     <-Census_data[1,] # store description
Census_data <-Census_data[-1,-1] # rest of the data,drop the first column and first row
rate_2014$id          <- as.integer(rate_2014$id) # we need to convert to integer for combining data
Census_data$GEO.id2   <- as.integer(Census_data$GEO.id2)
names(rate_2014)      <- c("GEO.id2","SK14") # rename the label
states<-regmatches(Census_data$GEO.display.label,regexpr(pattern = ", [A-Z]+[a-z]+",text=Census_data$GEO.display.label))
states<-as.factor(substr(states,3,nchar(states)))
Census_data$GEO.display.label<-states
county<-gsub(",.*$", "", Census_data$GEO.display.label)
Census_data$county<-county
newdata<-rate_2014 %>%
left_join(Census_data,by="GEO.id2") #combine two table
library(dplyr)
newdata<-rate_2014 %>%
left_join(Census_data,by="GEO.id2") #combine two table
head(colnames(Census_data),10)
head(Census_data)
head(newdata)
test<-sapply(newdata$GEO.id2,convertion)
convertion<-function(x){
if (x<=9999)
{out=paste("0",as.character(x),sep = "")
return(out)}
else
return(as.character(x))
}
test<-sapply(newdata$GEO.id2,convertion)
Census_data$employmentrate<-(1-Census_data$HC03_VC07)
Census_data$employmentrate<-(1-as.numeric(Census_data$HC03_VC07))
head(Cencus_data[,c("GEO.id2","employmentrate")])
head(Census_data[,c("GEO.id2","employmentrate")])
Census_data$employmentrate<-(1-as.numeric(Census_data$HC03_VC07))
head(Census_data[,c("GEO.id2","employmentrate")])
Census_data$employmentrate<-(100-as.numeric(Census_data$HC03_VC07))
head(Census_data[,c("GEO.id2","employmentrate")])
head(test)
Census_data$fips<-sapply(Census_data$GEO.id2,convertion)
head(Census_data[,c("fips","employmentrate")])
drawemployment<-Census_data[,c("fips","employmentrate")]
names(drawemployment)<-c("id","rate")
write.table(drawemployment, file="../output/drawemployment.tsv", quote=FALSE, sep='\t', row.names = FALSE)
all_content = readLines("../data/Census data with variables 2016.csv")
skip_second = all_content[-2]
cencus.data    = read.csv(textConnection(skip_second), header = TRUE, stringsAsFactors = FALSE)
all_content = readLines("../data/Census data with variables 2016.csv")
skip_second = all_content[-2]
cencus.data    = read.csv(textConnection(skip_second), header = TRUE, stringsAsFactors = FALSE)
head(cencus.data)
library(dplyr)
```{r message=FALSE}
library(dplyr)
load<-function(path){
all_content = readLines(path)
skip_first = all_content[-1]
df    = read.csv(textConnection(skip_first), header = TRUE, stringsAsFactors = FALSE)
return(df)
}
urban        <-load("../data/Urban data by county.csv")
median.income<-load("../data/Median income by county.csv")
high.school  <-load("../data/high school information county.csv")
social.capital<-read.csv("../output/merged.csv")
urban<-urban %>% select(Id2,Urban.,Total.)
urban$urban_percent=urban$Urban./urban$Total.
# summary(urban)
names(social.capital)[1]<-"Id2"
median.income<-median.income %>% select(Estimate..INCOME.AND.BENEFITS..IN.2014.INFLATION.ADJUSTED.DOLLARS....Total.households...Mean.household.income..dollars.,Id2)
names(median.income)<-c("median_income","Id2")
names(social.capital)[1]<-"Id2"
median.income<-median.income %>% select(Estimate..INCOME.AND.BENEFITS..IN.2014.INFLATION.ADJUSTED.DOLLARS....Total.households...Mean.household.income..dollars.,Id2)
high.school<-high.school %>% select(Id2,Estimate..Total.,Estimate..Less.than.high.school.graduate.)
high.school$less_than_high_school_graduate_percent<-high.school$Estimate..Less.than.high.school.graduate./high.school$Estimate..Total.
m1<-high.school %>% full_join(median.income,by="Id2")
m2<-urban %>% full_join(social.capital,by="Id2")
merged<-m1 %>% full_join(m2,by="Id2")
merged$median_income_scale<-scale(merged$median_income)
summary(merged)
load<-function(path){
all_content = readLines(path)
skip_first = all_content[-1]
df    = read.csv(textConnection(skip_first), header = TRUE, stringsAsFactors = FALSE)
return(df)
}
urban        <-load("../data/Urban data by county.csv")
median.income<-load("../data/Median income by county.csv")
high.school  <-load("../data/high school information county.csv")
social.capital<-read.csv("../output/merged.csv")
urban<-urban %>% select(Id2,Urban.,Total.)
urban$urban_percent=urban$Urban./urban$Total.
# summary(urban)
names(social.capital)[1]<-"Id2"
median.income<-median.income %>% select(Estimate..INCOME.AND.BENEFITS..IN.2014.INFLATION.ADJUSTED.DOLLARS....Total.households...Mean.household.income..dollars.,Id2)
names(median.income)<-c("median_income","Id2")
high.school<-high.school %>% select(Id2,Estimate..Total.,Estimate..Less.than.high.school.graduate.)
high.school$less_than_high_school_graduate_percent<-high.school$Estimate..Less.than.high.school.graduate./high.school$Estimate..Total.
m1<-high.school %>% full_join(median.income,by="Id2")
m2<-urban %>% full_join(social.capital,by="Id2")
merged<-m1 %>% full_join(m2,by="Id2")
merged$median_income_scale<-scale(merged$median_income)
summary(merged)
summary(urban)
m.1<-lm(sk14~Jim_Crow+urban_percent,data=merged)
summary(m.1)
summary(lm(sk14~Jim_Crow+urban_percent,data=merged))
summary(lm(sk14~Jim_Crow+median_income_scale,data=merged))
summary(lm(sk14~Jim_Crow+less_than_high_school_graduate_percent,data=merged))
summary(lm(sk14~Jim_Crow+less_than_high_school_graduate_percent,data=merged))
summary(lm(sk14~Jim_Crow+less_than_high_school_graduate_percent+urban_percent+median_income_scale,data=merged))
summary(lm(urban_percent~Jim_Crow,data=merged))
summary(lm(median_income~Jim_Crow,data=merged))
summary(lm(median_income~Jim_Crow,data=merged))
summary(lm(sk14~Jim_Crow+median_income,data=merged))
summary(lm(sk14~Jim_Crow+less_than_high_school_graduate_percent+urban_percent+median_income,data=merged))
summary(lm(urban_percent~Jim_Crow,data=merged))
new_high_school<-load("high school 2006-2010.csv")
new_high_school<-load("../data/high school 2006-2010.csv")
summary(new_high_school)
new_high_school<-load("../data/high school 2006-2010.csv")
summary(new_high_school)
new_income<-load("../data/income 2006-2010.csv")
new_Gini<-load("../data/Gini coefficient 2010-2014.csv")
new_Gini<-load("../data/Gini coefficient 2010-2014.csv")
new_income<-load("../data/income 2006-2010.csv")
head(new_income)
new.urban<-load("urban rural 2000.csv")
new.urban<-load("../data/urban rural 2000.csv")
new.high.school<-load("../data/high school 2006-2010.csv")
new.urban<-load("../data/urban rural 2000.csv")
Gini<-load("../data/Gini coefficient 2010-2014.csv")
new.urban<-urban %>% select(Id2,Urban.,Total.)
new.urban$urban_percent=new.urban$Urban./new.urban$Total.
head(new.high.school)
new.high.school<-new.high.school %>% select(Id2,Estimate..Total.,Estimate..Less.than.high.school.graduate.)
new.high.school<-new.high.school %>% select(Id2,Total..Estimate..Population.18.to.24.years,Total..Estimate..Less.than.high.school.graduate)
new.high.school$less_than_high_school_graduate_percent<-new.high.school$Total..Estimate..Population.18.to.24.years/Total..Estimate..Less.than.high.school.graduate
new.high.school<-new.high.school %>% select(Id2,Total..Estimate..Population.18.to.24.years,Total..Estimate..Less.than.high.school.graduate)
new.high.school$less_than_high_school_graduate_percent<-new.high.school$Total..Estimate..Population.18.to.24.years/Total..Estimate..Less.than.high.school.graduate
new.high.school<-new.high.school %>% select(Id2,Total..Estimate..Population.18.to.24.years,Total..Estimate..Less.than.high.school.graduate)
new.high.school$less_than_high_school_graduate_percent<-new.high.school$Total..Estimate..Population.18.to.24.years/new.high.school$Total..Estimate..Less.than.high.school.graduate
new.high.school$less_than_high_school_graduate_percent<-new.high.school$Total..Estimate..Less.than.high.school.graduate/new.high.school$Total..Estimate..Population.18.to.24.years
summary(new.high.school)
as.numeric(new.high.school)
summary(new.high.school)
new.high.school$Total..Estimate..Less.than.high.school.graduate<-as.numeric(new.high.school$Total..Estimate..Less.than.high.school.graduate)
summary(new.high.school)
head(new.median.income)
new.median.income<-load("../data/income 2006-2010.csv")
summary(high.school)
new.high.school<-new.high.school %>% select(Id2,Total..Estimate..Population.18.to.24.years,Total..Estimate..Less.than.high.school.graduate)
new.high.school$Total..Estimate..Less.than.high.school.graduate<-as.numeric(new.high.school$Total..Estimate..Less.than.high.school.graduate)/100
new.median.income<-median.income %>%
select(Estimate..INCOME.AND.BENEFITS..IN.2010.INFLATION.ADJUSTED.DOLLARS....Mean.household.income..dollars.,Id2)
new.median.income<-median.income %>%
select(Estimate..INCOME.AND.BENEFITS..IN.2010.INFLATION.ADJUSTED.DOLLARS....Mean.household.income..dollars.,Id2)
median.income<-median.income %>% select(Estimate..INCOME.AND.BENEFITS..IN.2014.INFLATION.ADJUSTED.DOLLARS....Total.households...Mean.household.income..dollars.,Id2)
library(dplyr)
median.income<-median.income %>% select(Estimate..INCOME.AND.BENEFITS..IN.2014.INFLATION.ADJUSTED.DOLLARS....Total.households...Mean.household.income..dollars.,Id2)
median.income<-median.income %>% dplyr::select(Estimate..INCOME.AND.BENEFITS..IN.2014.INFLATION.ADJUSTED.DOLLARS....Total.households...Mean.household.income..dollars.,Id2)
new.high.school<-new.high.school %>% select(Id2,Total..Estimate..Population.18.to.24.years,Total..Estimate..Less.than.high.school.graduate)
head(median.income)
new.median.income<-new.median.income %>%
select(Estimate..INCOME.AND.BENEFITS..IN.2010.INFLATION.ADJUSTED.DOLLARS....Mean.household.income..dollars.,Id2)
names(new.median.income)<-c("median_income","Id2")
n.m1<-new.high.school %>% full_join(new.median.income,by="Id2")
n.m2<-new.urban %>% full_join(social.capital,by="Id2")
new.merged<-n.m1 %>% full_join(n.m2,by="Id2")
head(gini)
head(Gini)
merged<- merged %>% full_join(Gini,by="Id2")
merged$median_income
merged<- merged %>% full_join(Gini,by="Id2")
merged$median_income_scale
m1<-high.school %>% full_join(median.income,by="Id2")
m2<-urban %>% full_join(social.capital,by="Id2")
merged<-m1 %>% full_join(m2,by="Id2")
# merged$median_income_scale<-scale(merged$median_income)
# merged$median_income_scale
merged<- merged %>% full_join(Gini,by="Id2")
summary(lm(Estimate..Gini.Index~Jim_Crow+urban_percent,data=merged))# 1. % Urban + JC --> SC 2014
summary(lm(Estimate..Gini.Index~Jim_Crow+median_income,data=merged))
summary(lm(Estimate..Gini.Index~Jim_Crow+less_than_high_school_graduate_percent,data=merged))
summary(lm(Estimate..Gini.Index~Jim_Crow+less_than_high_school_graduate_percent+urban_percent+median_income,data=merged))
head(new.merged)
summary(lm(Estimate..Gini.Index~Jim_Crow+urban_percent,data=new.merged))
new.merged<-new.merged %>% full_join(social.capital,by="Id2")
summary(lm(sk05~Jim_Crow+urban_percent,data=new.merged))
n.m1<-new.high.school %>% full_join(new.median.income,by="Id2")
n.m2<-new.urban %>% full_join(social.capital,by="Id2")
new.merged<-n.m1 %>% full_join(n.m2,by="Id2")
# new.merged<-new.merged %>% full_join(social.capital,by="Id2")
summary(lm(sk05~Jim_Crow+urban_percent,data=new.merged))
summary(lm(sk05~Jim_Crow+urban_percent,data=new.merged))# 1. % Urban + JC --> SC 2014
summary(lm(sk05~Jim_Crow+median_income,data=new.merged))
summary(lm(sk05~Jim_Crow+less_than_high_school_graduate_percent,data=new.merged))
summary(lm(sk05~Jim_Crow+Total..Estimate..Less.than.high.school.graduate,data=new.merged))
summary(lm(sk05~Jim_Crow+Total..Estimate..Less.than.high.school.graduate+urban_percent+median_income,data=new.merged))
new.merged$Total..Estimate..Less.than.high.school.graduate
summary(lm(sk05~Jim_Crow+urban_percent,data=new.merged))# 1. % Urban + JC --> SC 2014
summary(lm(sk05~Jim_Crow+median_income,data=new.merged))
summary(lm(sk05~Jim_Crow+Total..Estimate..Less.than.high.school.graduate,data=new.merged))
summary(lm(sk05~Jim_Crow+Total..Estimate..Less.than.high.school.graduate+urban_percent+median_income,data=new.merged))
summary(lm(sk09~Jim_Crow+urban_percent,data=new.merged))# 1. % Urban + JC --> SC 2014
summary(lm(sk09~Jim_Crow+median_income,data=new.merged))
summary(lm(sk09~Jim_Crow+Total..Estimate..Less.than.high.school.graduate,data=new.merged))
summary(lm(sk09~Jim_Crow+Total..Estimate..Less.than.high.school.graduate+urban_percent+median_income,data=new.merged))
